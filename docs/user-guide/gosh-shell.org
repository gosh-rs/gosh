#+TITLE: 用户指南: gosh Shell (交互式环境与脚本)
#+AUTHOR: Roo (AI 助手) &amp; Wenping Guo
#+LANGUAGE: zh-CN
#+OPTIONS: toc:nil num:nil ^:{} indent:t

* 启动 gosh
`gosh` 提供了两种主要的运行模式: 交互式 REPL 和脚本执行模式（批处理）.

1.  交互式 REPL (Read-Eval-Print Loop):
在终端中直接运行 `gosh` 命令即可进入交互式环境:
#+BEGIN_SRC bash
gosh
#+END_SRC
您会看到类似以下的提示符 (`gosh>`), 表示 `gosh` 正在等待您的命令. 在此模式下, 您可以逐条输入命令并立即看到结果. 输入 `quit`, `q`, `exit` 或按 `Ctrl-D` 来退出 REPL.

2.  脚本执行模式 (批处理):
您可以将一系列 `gosh` 命令保存在一个文本文件（例如 `myscript.gosh` 或 `foo.bat`）中，然后使用 `-x` 参数来执行它:
#+BEGIN_SRC bash
gosh -x myscript.gosh
#+END_SRC
或者使用 Shell 的 here-document 功能传递命令:
#+BEGIN_SRC bash
gosh -- << EOF
load foo.cif
write foo.mol2
EOF
#+END_SRC
`gosh` 会按顺序执行文件或输入流中的所有命令. 这对于自动化重复性任务非常有用.

* 基本概念
** 当前分子列表:
`gosh` 在内存中维护一个当前活动的分子列表 (通常只有一个分子，除非加载了多结构文件或进行了特定操作). 许多命令默认作用于这个列表中的分子. `load` 命令会覆盖当前的分子列表.

** 原子选择 (`select` 命令):
一些命令 (如 `freeze`, `update`) 需要先选择特定的原子. `select` 命令用于定义当前的选择. 选中的原子会被 `gosh` 记住, 供后续命令使用.
- 选择所有原子: `select all`
- 取消选择: `select none`
- 按原子序号 (从 1 开始) 选择: 支持逗号分隔和连字符范围.
  #+BEGIN_SRC gosh
  gosh> select 1-3,6-8   # 选择原子 1, 2, 3, 6, 7, 8
  #+END_SRC
- 按 Z 方向分数坐标选择 (仅限周期性体系):
  #+BEGIN_SRC gosh
  gosh> select --by-fz >0.3 # 选择 Z 分数坐标 > 0.3 的原子
  gosh> select --by-fz <0.3 # 选择 Z 分数坐标 < 0.3 的原子
  #+END_SRC

* 命令详解
以下是 `gosh` REPL 中常用的命令及其说明:

** 文件 I/O 与格式:
- =avail= :: 显示支持的文件格式列表 (基于 `gchemol` 后端).
  #+BEGIN_SRC text
  # 示例输出 (可能不完整):
  filetype: "text/xyz", possible extensions: [".xyz"]
  filetype: "text/mol2", possible extensions: [".mol2"]
  filetype: "text/coord", possible extensions: [".coord"]
  filetype: "text/mol", possible extensions: [".sd", ".sdf", ".mol"]
  filetype: "vasp/poscar", possible extensions: ["POSCAR", "CONTCAR", ".poscar", ".vasp"]
  filetype: "text/cif", possible extensions: [".cif"]
  filetype: "text/pdb", possible extensions: [".pdb", ".ent"]
  filetype: "gaussian/input", possible extensions: [".gjf", ".com", ".gau"]
  filetype: "ms/car", possible extensions: [".car"]
  filetype: "ms/xtl", possible extensions: [".xtl"]
  filetype: "siesta/fdf", possible extensions: [".fdf"]
  filetype: "gulp/input", possible extensions: [".gin", ".gulp"]
  #+END_SRC
  *注意:* 某些格式（如 siesta/gulp/xtl/car）可能暂时只支持写入。

- =load <文件名>= :: 加载指定文件中的分子. `gosh` 会根据文件名(扩展名)自动确认文件格式. 支持读入包含多个结构的文件 (如 mol2, pdb 轨迹).
  #+BEGIN_SRC gosh
  gosh> load CONTCAR
  #+END_SRC

- =write [<文件名>] [--json]= :: 将当前分子写入文件. 文件名扩展名决定输出格式. 如果省略文件名, 则尝试写入最后加载或保存的文件. 支持写入包含多个结构的文件.
  #+BEGIN_SRC gosh
  gosh> write foo.cif
  gosh> write foo.gjf   # 以 Gaussian input 格式输出
  gosh> write foo.mol2  # 以 mol2 格式输出
  #+END_SRC

- =load-chk <检查点文件名> [--chk_slot <槽位号>]=- :: 从 `gosh_database` 检查点文件加载分子.

- =format <模板文件> [-o <输出文件>]=- :: 使用 Handlebars (`.hbs`) 或 Tera (`.tera`) 模板文件格式化输出当前分子信息.
  - 模板语言参考:
    - [[https://github.com/ybyygu/gchemol/blob/master/README.md][gchemol README]] (可能包含数据模型信息)
    - [[https://handlebarsjs.com/][Handlebars.js 官网]]
    - [[https://tera.netlify.app/docs/][Tera 文档]]
  - 示例 (使用 Handlebars 模板生成 GULP 输入):
    #+BEGIN_SRC gosh
    gosh> format gulp.hbs # 输出到屏幕
    #+END_SRC
  - 示例 (使用 Tera 模板生成 VASP POSCAR):
    #+BEGIN_SRC gosh
    gosh> format poscar.tera -o POSCAR # 输出到文件 POSCAR
    #+END_SRC
  - *测试 BBM 输入模板:* 这是 `format` 的一个重要用途.
    #+BEGIN_SRC gosh
    gosh> load POSCAR_test
    gosh> format /path/to/template/input.tera # 检查渲染结果
    #+END_SRC

** 结构编辑与操作:
- =rebond [-r <容差>]= :: 根据原子距离重新构建化学键 (默认容差 0.45).
- =clean= :: 清理分子几何结构.
- =select ...= :: 选择原子 (详见上方“基本概念”).
- =freeze [-u]= :: 冻结选中的原子 (`-u` 解冻). 需要先 `select`.
  #+BEGIN_SRC gosh
  # 固定 1,3,5 号原子
  gosh> select 1,3,5
  gosh> freeze
  # 解冻所有原子
  gosh> select all
  gosh> freeze -u
  #+END_SRC
- =update <目标> -f <源文件> [-s <选择>]=- :: 用源文件 (`-f`) 中的信息更新当前分子.
  - `<目标>`: `coords` 或 `freezing`.
  - `[-s <选择>]`: 只更新选定原子.
  #+BEGIN_SRC gosh
  # 载入 POSCAR1
  gosh> load POSCAR1
  # 将 POSCAR2 中 1-5 号原子的坐标复制过来
  gosh> update coords -f POSCAR2 -s 1-5
  # 输出新结构
  gosh> write POSCAR3
  #+END_SRC

** 晶体操作:
- =unbuild-crystal= :: 移除周期性，变成普通分子.
- =create-bounding-box [<填充宽度>]=- :: 为气相分子/非周期性结构自动添加晶胞边界（默认为 1.0 埃填充）.
  #+BEGIN_SRC gosh
  gosh> create-bounding-box -h # 查看帮助
  gosh> create-bounding-box
  gosh> write foo_with_box.cif
  #+END_SRC
- =supercell <a> <b> <c>= :: 构建超胞.
  #+BEGIN_SRC gosh
  gosh> supercell 3 3 1
  gosh> write 331.cif
  #+END_SRC

** 其他命令:
- =convert <输入文件...> -e <目标扩展名>= :: 批量格式转换.
- =superimpose <参考分子文件>= :: 结构对齐 (可能未完全实现).
- =ls= :: 列出当前目录文件.
- =pwd= :: 显示当前目录路径.
- =help= 或 =h= 或 =?= :: 显示帮助.
- =quit= 或 =q= 或 =exit= 或 `Ctrl-D` :: 退出 REPL.

* 脚本示例
下面是一个简单的 `gosh` 脚本示例 (`process.gosh`):

#+BEGIN_SRC gosh
# 加载分子
load initial.xyz

# 清理结构并重建键
clean
rebond

# 创建一个 2x2x2 的超胞
supercell 2 2 2

# 将结果保存为 VASP POSCAR 格式
write final.poscar

# 退出
quit
#+END_SRC

执行此脚本:
#+BEGIN_SRC bash
gosh -x process.gosh
#+END_SRC
