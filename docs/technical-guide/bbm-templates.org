#+TITLE: 技术指南: BBM 模板详解
#+AUTHOR: Wenping Guo &amp; Roo (AI 助手)
#+LANGUAGE: zh-CN
#+OPTIONS: toc:nil num:nil ^:{} indent:t

* 核心概念: Chemical Model 与 Model Properties
在深入了解 BBM Template 之前，理解两个核心概念非常重要：`Chemical Model` 和 `Model Properties`。它们定义了 `bbm` 如何与计算后端（无论是外部程序还是内部实现）交互并获取结果。

** Chemical Model Trait
`Chemical Model` 是 `gosh_model` 库中定义的一个 Rust trait (接口)，它规范了计算模型必须提供的标准方法，主要是计算分子性质。
#+begin_src rust :tangle no
pub trait ChemicalModel {
    /// 定义如何计算单个分子的性质，如能量、力等。
    /// 返回一个 Result，其中包含 ModelProperties 或错误。
    fn compute(&mut self, mol: &Molecule) -> Result<ModelProperties>;

    /// (可选) 定义如何批量计算多个分子的性质，以减少 IO 开销，
    /// 特别适用于小分子计算。默认未实现。
    fn compute_bunch(&mut self, mols: &[Molecule]) -> Result<Vec<ModelProperties>> {
        unimplemented!()
    }
}
#+end_src
任何想要被 `bbm` 的优化器 (`gosh_optim`) 或其他需要能量/力的组件使用的计算后端，都必须实现这个 `ChemicalModel` trait。BBM Template 实际上就是 `BlackBoxModel`（`ChemicalModel` 的一个实现）与外部程序交互的机制。

** Model Properties 结构
`ModelProperties` 是 `ChemicalModel` 计算方法返回的标准数据结构，用于封装计算得到的结果。它的定义如下：
#+begin_src rust :tangle no
/// The computed results by external application or internal model
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct ModelProperties {
    pub energy: Option<f64>, // 总能量 (单位: eV)
    pub forces: Option<Vec<[f64; 3]>>, // 原子受力 (单位: eV/angstrom)
    pub dipole: Option<[f64; 3]>, // 偶极矩
    #[serde(skip_deserializing, skip_serializing)]
    pub molecule: Option<Molecule>, // 计算后的分子结构 (通常包含最终坐标)
    #[serde(skip_deserializing, skip_serializing)]
    pub force_constants: Option<Vec<[f64; 3]>>, // (可能用于特定分析)
}
#+end_src
需要注意的是，这些性质是依赖于具体计算模型的 (model-dependent)，因此称为 `ModelProperties` 而非 `MolecularProperties`。`bbm` 的主要任务之一就是执行 Template 中的 `submit.sh` 脚本，并期望从其标准输出中解析出符合这种（通常是文本或 JSON 格式）`ModelProperties` 的数据。单位约定为 eV 和 eV/angstrom。

* 什么是 BBM Template?
BBM (BlackBox Model) Template 是 `bbm` 命令用来与外部计算化学程序(如 VASP, Gaussian, ORCA 等)进行交互的一套基于文件规则的协议. 每个 Template 对应一种特定的计算任务(例如: VASP 的结构优化、Gaussian 的单点能计算).

Template 的核心作用是充当 `bbm` 和外部程序之间的"翻译器"和"协调者", 最终目标是计算并返回符合 `ModelProperties` 格式的结果:
1.  输入生成: 读取 `bbm` 提供的分子结构信息，并将其转换为外部程序所需的输入文件格式.
2.  任务执行: 调用外部程序来执行计算.
3.  结果解析: 读取外部程序的输出文件，提取关键结果（能量、力、结构等），并将其格式化为 `ModelProperties` 输出.

通过使用不同的 Template，`bbm` 可以驱动各种不同的计算程序和任务类型，而无需修改 `bbm` 自身的核心代码.

* 为何选择 BBM 而非 ASE Calculator?
[[https://wiki.fysik.dtu.dk/ase/ase.html][ASE (Atomic Simulation Environment)]] 拥有非常活跃和丰富的开源生态，提供了大量针对量子化学和分子动力学软件的接口（Calculators）. 那么，为什么还需要 BBM 呢？BBM 的设计主要考虑了以下几点，以提供与 ASE 不同的侧重点和优势：

1.  参数修改的直观性: 在 ASE 中，修改计算参数通常需要编写或修改 Python 代码来设置 Calculator 的参数字典，这对于不熟悉 ASE 内部机制或 Python 的用户来说可能不够直观，增加了学习成本和出错的可能性. BBM 通过分离的模板文件 (`input.tera`/`input.hbs`) 来控制输入参数，用户可以直接修改模板文本，更加直观易懂.

2.  接口定义的灵活性与语言无关性: ASE 的 Calculator 必须使用 Python [[https://wiki.fysik.dtu.dk/ase/development/calculators.html][定义接口]]. 虽然 Python 功能强大，但这带来了一定的学习门槛，并且对于性能敏感的解析任务可能不是最优选择. BBM 的接口基于标准化的目录结构和文件协议（输入模板、执行/解析脚本），不限制接口脚本的实现语言. 用户可以选择 Shell, Python, Perl, Awk，甚至编译型语言（如果需要极致性能）来编写 `submit.sh` 中的执行和解析逻辑，只要最终能向标准输出打印符合 `ModelProperties` 格式的结果即可.

3.  用户控制的最大化: BBM 的设计理念是将控制权尽可能交给用户：
    - 输入控制: 通过完全自定义的输入文件模板 (`input.tera`/`input.hbs`)，用户可以精确控制生成给外部程序的每一个输入细节，灵活适应各种非标准或复杂的计算任务.
    - 输出处理: 通过自定义的执行/解析脚本 (`submit.sh`)，用户可以完全控制如何运行程序、如何解析输出文件，可以方便地提取任何所需的信息，并按照 `ModelProperties` 规范输出给 `bbm`.
4.  我们可以在 BBM 中调用 ASE. 参见 [[https://github.com/gosh-rs/gosh/tree/main/templates/siesta-ase][siesta-ase]]. (链接可能需要更新)

总结来说，ASE 在预定义接口的丰富性和 Python 生态整合方面有优势，而 BBM 则在参数调整的直观性、接口实现的语言无关性以及用户对输入输出过程的完全控制方面提供了更大的灵活性. 两者可以根据用户的具体需求和偏好进行选择.

* 如何编写新的 BBM 计算模板?
一个典型的 BBM Template 是一个包含特定文件的目录. 当您使用 `bbm --bbm-dir <模板目录>` 时，`bbm` 会在该目录下查找并使用这些文件. 编写新模板主要涉及以下几个核心文件：

1.  配置文件 (`.env`):
    - 可选文件，用于修改 BBM 模板的默认参数或设置环境变量.
    - 使用 dotenv 格式 (KEY=VALUE).
    - 可定义变量:
      - `BBM_SCR_DIR`: 计算任务公用的临时目录路径. 在 Linux 系统, 默认为 `/tmp`.
      - `BBM_TPL_FILE`: 指定输入渲染模板的文件名. 默认为 `input.hbs`.
      - `BBM_RUN_FILE`: 指定任务提交脚本的文件名. 默认为 `submit.sh`.
    - 这些变量可以在 `submit.sh` 中被读取和使用.

2.  输入模板文件 (`input.hbs` 或 `input.tera`):
    - 包含外部程序输入文件骨架的文本文件，嵌入模板标记.
    - `bbm` 使用此文件和 `Molecule` 数据模型来渲染生成最终的计算输入流 (传递给 `submit.sh` 的 stdin).
    - 支持两种模板引擎，根据 `.env` 中 `BBM_TPL_FILE` 的设置或默认文件名扩展名确定:
      - `input.hbs`: 使用 [[https://handlebarsjs.com/guide/][Handlebars]] 模板语言. 这是默认使用的模板.
      - `input.tera`: 使用 [[https://tera.netlify.app/docs/][Tera]] 模板语言. 如需使用，需在 `.env` 中添加 `BBM_TPL_FILE=input.tera`.
    - `Molecule` 数据模型示例: 参见 [[file:si5.json][si5.json]].
    - 用户关注点: 理解所选模板引擎的语法，以及如何访问 `Molecule` 数据模型中的字段来生成正确的计算输入.

3.  运行及解析脚本 (`submit.sh` 或由 `BBM_RUN_FILE` 指定):
    - 必需的可执行脚本，是 Template 的入口和核心.
    - 职责:
      a.  接收由输入模板渲染好的计算输入流作为其 标准输入 (stdin).
      b.  (通常需要) 将接收到的 stdin 保存为外部程序所需的输入文件.
      c.  设置计算环境，调用外部计算程序执行计算.
      d.  等待计算完成.
      e.  解析外部程序产生的输出文件. 可以调用 `gosh-parser` 辅助解析.
      f.  将提取的能量、力、最终结构等结果，按照 `ModelProperties` 格式打印到其标准输出 (stdout).
    - 可用环境变量:
      - `BBM_TPL_DIR`: Template 目录的绝对路径.
      - `BBM_JOB_DIR`: 运行 `bbm` 命令时所在的当前目录的绝对路径.
      - `BBM_SCR_DIR`: 计算任务实际运行的临时目录的绝对路径. 脚本执行时的 当前工作目录 (pwd) 就是在这个临时目录下.
    - 临时目录清理: `submit.sh` 正常退出后，其运行时所在的 `.tmpXXXXXX` 临时目录会被 `bbm` 自动清除.
    - ModelProperties 格式示例: (见本文件开头的定义和以下链接)
      - [[https://github.com/gosh-rs/gosh-model/blob/master/tests/files/sample.txt][gosh-model/sample.txt]]
      - [[https://github.com/gosh-rs/gosh-model/blob/master/tests/files/sample_special.txt][gosh-model/sample_special.txt]]
    - 用户关注点: 编写健壮的脚本逻辑来处理输入流、执行计算、精确解析输出，并确保最终结果以正确的 `ModelProperties` 格式输出到 stdout.

* BBM 内部的执行机制与标准
`bbm` 与 Template 交互的核心机制可以概括为：

1.  数据准备: `bbm` 加载分子，根据 Template 配置渲染输入模板 (`input.hbs`/`.tera`) 生成输入流.
2.  执行脚本: `bbm` 执行 Template 中的 `submit.sh` 脚本.
3.  数据传递 (PIPE):
    - 渲染后的计算输入流 => 通过管道传递给 `submit.sh` 的 *标准输入 (stdin)*.
    - `submit.sh` 计算和解析后的结果 (`ModelProperties` 格式) => 通过 `submit.sh` 的 *标准输出 (stdout)* 返回给 `bbm`.
4.  结果处理: `bbm` 捕获并解析 `submit.sh` 的 stdout，获取 `ModelProperties` 数据用于后续处理（如优化步骤、保存输出、更新检查点）。

这个基于标准输入输出和可执行脚本的接口设计，使得 Template 的实现非常灵活且语言无关。

* Interactive Mode (交互计算模式)
这是一种特殊的 BBM 运行模式，旨在提高需要多步调用同一计算程序的任务（如结构优化、NEB、MD）的效率，特别是对于 VASP 等启动开销较大的程序。

工作原理:
- 主计算进程 (`submit.sh` 或其调用的程序) 在第一次调用后 *长驻内存*，不退出。
- 后续的计算步骤通过一个额外的 `interact.sh` 脚本（或其他机制）与主进程进行交互，传递新的坐标并获取力和能量，而无需重新启动主计算进程。
- 这样可以充分利用上一步计算的结果（如 VASP 的 WAVECAR, CHGCAR），避免重复初始化。

优点:
- 显著提升计算效率（对 VASP 可能提升 30% 或更多）。
- 对于 VASP，通常无需在 `submit.sh` 中手动处理 WAVECAR/CHGCAR 的读取。
- 交互模式比普通模式可能更简便省心。

推荐场景:
- 对 VASP 进行的多步计算（结构优化、NEB 等）。

(具体实现和使用方式可能需要参考特定支持 Interactive Mode 的 Template 文档。)

* 使用与自定义 Template
1.  查找和使用:
    - 官方模板库: [[https://github.com/ybyygu/bbm-templates][bbm-templates]].
    - 使用 `bbm --bbm-dir <path_to_template>` 调用.

2.  理解模板:
    - 检查输入模板文件 (`input.hbs` 或 `input.tera`) 理解输入生成逻辑.
    - 仔细阅读 `submit.sh` 理解完整的执行、解析和输出流程.
    - 查看 `.env` (如果存在) 了解配置.

3.  测试 BBM 模板:
    - 使用 `gosh format` 测试输入生成部分 (详见 [[file:../user-guide/gosh-shell.org][gosh 用户指南]]).

4.  自定义 (初步):
    - 修改计算参数: 编辑输入模板文件.
    - 调整运行环境/程序调用/输出解析: 编辑 `submit.sh`.
    - 修改默认设置: 编辑或创建 `.env` 文件.
    - 建议: 复制并重命名模板目录进行修改.

5.  创建新模板 (高级):
    - 需要理解目标程序的输入输出、模板引擎语法、`ModelProperties` 输出格式，并编写 `submit.sh` 脚本. 参考现有模板是最好的起点.

* 注意事项
- VASP 原子排序: 由于 VASP POSCAR 格式要求原子按元素类型分组排列，当使用涉及 VASP 的 BBM 模板时，计算前后（例如优化前后）的原子顺序可能会发生变化. 需要留意此可能性.
